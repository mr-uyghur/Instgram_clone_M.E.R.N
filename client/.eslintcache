[{"E:\\Insta_clone_MERN\\client\\src\\index.js":"1","E:\\Insta_clone_MERN\\client\\src\\App.js":"2","E:\\Insta_clone_MERN\\client\\src\\reportWebVitals.js":"3","E:\\Insta_clone_MERN\\client\\src\\components\\NavBar.js":"4","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Home.js":"5","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Profile.js":"6","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Signup.js":"7","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Signin.js":"8","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\CreatePost.js":"9","E:\\Insta_clone_MERN\\client\\src\\reducers\\userReducer.js":"10","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\UserProfile.js":"11","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\SubscribedUserPosts.js":"12","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Explore.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":2155,"mtime":1613012815045,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1661,"mtime":1613013152379,"results":"18","hashOfConfig":"15"},{"size":8947,"mtime":1613206495102,"results":"19","hashOfConfig":"15"},{"size":4321,"mtime":1613204762009,"results":"20","hashOfConfig":"15"},{"size":4511,"mtime":1613207019125,"results":"21","hashOfConfig":"15"},{"size":2765,"mtime":1613013052142,"results":"22","hashOfConfig":"15"},{"size":3615,"mtime":1613012507809,"results":"23","hashOfConfig":"15"},{"size":557,"mtime":1613200655024,"results":"24","hashOfConfig":"15"},{"size":6029,"mtime":1613016302816,"results":"25","hashOfConfig":"15"},{"size":8939,"mtime":1613029627860,"results":"26","hashOfConfig":"15"},{"size":2575,"mtime":1613029780344,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"9vfwpr",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"30"},"E:\\Insta_clone_MERN\\client\\src\\index.js",[],["65","66"],"E:\\Insta_clone_MERN\\client\\src\\App.js",["67","68"],"import './App.css'\nimport React, { useEffect, createContext, useReducer, useContext } from 'react'\nimport NavBar from './components/NavBar'\nimport { BrowserRouter, Route, Switch, useHistory } from 'react-router-dom'\nimport Home from './components/screens/Home'\nimport Signin from './components/screens/Signin'\nimport Profile from './components/screens/Profile'\nimport Signup from './components/screens/Signup'\nimport CreatePost from './components/screens/CreatePost'\nimport { reducer, initialState } from './reducers/userReducer'\nimport UserProfile from './components/screens/UserProfile'\nimport SubscribedUserPosts from './components/screens/SubscribedUserPosts'\nimport Explore from './components/screens/Explore'\n\n\nexport const UserContext = createContext()\n\n\nconst Routing = () => {\n  const history = useHistory()\n  const {state,dispatch} = useContext(UserContext)\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    // if we have the user already then make use of history and push the user to home screen\n    if (user) {\n      dispatch({ type: \"USER\", payload: user })\n      // history.push('/')\n    }\n    // if we don't have the user, redirect to login screen\n    else {\n      history.push('/signin')\n    }\n  }, [])\n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n\n      <Route exact path=\"/explore\">\n        <Explore />\n      </Route>\n\n      <Route path='/signin'>\n        <Signin />\n      </Route>\n\n      <Route path='/signup'>\n        <Signup />\n      </Route>\n\n      <Route exact path='/profile'>\n        <Profile />\n      </Route>\n\n      <Route path='/create'>\n        <CreatePost />\n      </Route>\n      \n      <Route path='/profile/:userid'>\n      <UserProfile />\n      </Route>\n\n      <Route path='/myfollowingpost'>\n      <SubscribedUserPosts />\n      </Route>\n    </Switch>\n  )\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return (\n    <UserContext.Provider value={{ state, dispatch }}>\n\n      <BrowserRouter>\n        <NavBar />\n        <Routing />\n\n      </BrowserRouter>\n\n    </UserContext.Provider>\n\n\n\n  );\n}\n\nexport default App;\n","E:\\Insta_clone_MERN\\client\\src\\reportWebVitals.js",[],"E:\\Insta_clone_MERN\\client\\src\\components\\NavBar.js",[],"E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Home.js",["69","70","71","72","73"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { UserContext } from '../../App'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Home = () => {\r\n    const [data, setData] = useState([])\r\n    // the state will get the data of user whose logged in\r\n    const { state, dispatch } = useContext(UserContext)\r\n\r\n    useEffect(() => {\r\n        fetch('/allpost', {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                setData(result.posts)\r\n            })\r\n    }, [])\r\n\r\n    const likePost = (id) => {\r\n        fetch('/like', {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                const newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    const unlikePost = (id) => {\r\n        fetch('/unlike', {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                // console.log(result)\r\n                const newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const makeComment = (text, postId) => {\r\n        // sent text and postId to the backend\r\n        fetch('/comment', {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId,\r\n                text\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                const newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const deletePost = (postid) => {\r\n        fetch(`/deletepost/${postid}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                Authorization: \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                const newData = data.filter(item => {\r\n                    return item._id !== result._id\r\n                })\r\n                setData(newData)\r\n            })\r\n\r\n    }\r\n\r\n    const deleteComment = (postId, commentId) => {\r\n        fetch(`/deletecomment/${postId}/${commentId}`, {\r\n            method: \"delete\",\r\n            headers: {\r\n                \"Authorization\": localStorage.getItem(\"jwt\")\r\n            },\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                let newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {/* use map to show dymamic info from the data base */}\r\n            {\r\n                data.map(item => {\r\n                    return (\r\n                        <div className=\"card home-card\" key={item._id}>\r\n\r\n                            <h6 style={{ padding: \"5px\" }}>\r\n\r\n                                <Link to={item.postedBy._id !== state._id ? \"/profile/\" + item.postedBy._id : \"/profile\"} >\r\n                                    <img style={{ width: \"30px\", height: \"30px\", borderRadius: \"80px\" }} src={item.postedBy.pic} />\r\n                                    {item.postedBy.name}\r\n                                </Link>\r\n\r\n                                {item.postedBy._id == state._id\r\n                                    && <i className=\"material-icons\"\r\n                                        style={{ float: \"right\", color: \"red\" }}\r\n                                        onClick={() => deletePost(item._id)}\r\n                                    >delete_forever</i>\r\n                                }\r\n\r\n                            </h6>\r\n\r\n                            <div className=\"card-image\">\r\n                                <img src={item.photos} />\r\n                            </div>\r\n\r\n                            <div className=\"card-image\">\r\n\r\n                                {/* user can only like post once, check if user is included \r\n                                in the likes array, then return like or unlike button accordingly*/}\r\n                        \r\n                                {item.likes.includes(state._id) ?\r\n\r\n                                    <i className=\"material-icons\"\r\n                                    style={{ color: \"red\" }}\r\n                                        onClick={() => { unlikePost(item._id) }}\r\n                                    >favorite</i>\r\n                                    :\r\n                                    <i className=\"material-icons\"\r\n                                    style={{ color: \"red\" }}\r\n                                        onClick={() => { likePost(item._id) }}\r\n                                    >favorite_border</i>\r\n                                }\r\n\r\n\r\n\r\n                                {/* show the number of likes by getting the length of likes array */}\r\n                                <h6> {item.likes.length} likes</h6>\r\n                                <h6> Title: {item.title}</h6>\r\n                                <p> Description: {item.body} </p>\r\n\r\n                                {\r\n                                    item.comments.map((record) => {\r\n                                        return (\r\n                                            <h6 key={record._id}><span style={{ fontWeight: \"500\" }}> {record.postedBy.name}: </span>  {record.text}\r\n                                                {record.postedBy._id === state._id || item.postedBy._id == state._id\r\n                                                    ? <i className=\"material-icons small-icon\"\r\n                                                        onClick={() => deleteComment(item._id, record._id)}\r\n                                                        style={{ float: \"right\", fontSize: \"18px\" }}  >delete</i>\r\n                                                    :\r\n                                                    record.postedBy._id === state._id\r\n                                                    && <i className=\"material-icons small-icon\"\r\n                                                        onClick={() => deleteComment(item._id, record._id)}\r\n                                                        style={{ float: \"right\", fontSize: \"18px\" }}  >delete </i>\r\n                                                }\r\n                                            </h6>\r\n                                        )\r\n\r\n                                    })\r\n\r\n                                }\r\n\r\n                                <form onSubmit={(e) => {\r\n                                    e.preventDefault()\r\n                                    makeComment(e.target[0].value, item._id)\r\n                                }}>\r\n                                    <input type=\"text\" placeholder=\"add a comment\" /> <button className=\"btn waves-effect waves-light #0288d1 light-blue darken-2\" type=\"submit\">Comment</button>\r\n\r\n                                </form>\r\n                            </div>\r\n                        </div >\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\n","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Profile.js",["74","75"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { UserContext } from '../../App'\r\n\r\nconst Profile = () => {\r\n    const [mypics, setPics] = useState([])\r\n    const { state, dispatch } = useContext(UserContext)\r\n    const [image, setImage] = useState(\"\")\r\n    const [url, setUrl] = useState()\r\n\r\n    useEffect(() => {\r\n        fetch('/mypost', {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                setPics(result.mypost)\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() =>{\r\n        if(image){\r\n              // use formData to save the data\r\n        const data = new FormData()\r\n        data.append(\"file\", image)\r\n        // upload images to cloud\r\n        data.append(\"upload_preset\", \"insta_clone\")\r\n        data.append(\"cloud_name\", \"gloomy\")\r\n        // fetch those data back from cloud's API\r\n        fetch(\"https://api.cloudinary.com/v1_1/gloomy/image/upload\", {\r\n            method: \"POST\",\r\n            body: data,\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setUrl(data.url)\r\n                localStorage.setItem(\"user\",JSON.stringify({...state,pic:data.url}))\r\n                dispatch({ type: \"UPDATEPIC\",payload:data.url})\r\n                fetch('/updatepic',{\r\n                    method:\"put\",\r\n                    headers:{\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n                    },\r\n                    body:JSON.stringify({\r\n                        pic:data.url\r\n                    })\r\n                }).then(res => res.json())\r\n                // .then(result =>{\r\n                \r\n                // localStorage.setItem(\"user\",JSON.stringify({...state,pic:result.pic}))\r\n                // dispatch({ type: \"UPDATEPIC\",payload:result.pic})\r\n                // })\r\n                \r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n        }\r\n\r\n    },[image])\r\n    const updatePhoto = (file) => {\r\n        setImage(file)\r\n    }\r\n    return (\r\n        <div style={{ maxWidth: \"550px\", margin: \"0px auto\" }}>\r\n            <div style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-around\",\r\n                margin: \"18px 5px\",\r\n                borderBottom: \"1px solid grey\",\r\n                paddingBottom: \"10px\"\r\n            }}>\r\n                <div >\r\n                    <img style={{ width: \"160px\", height: \"160px\", borderRadius: \"80px\" }}\r\n                        src={state ? state.pic : \"loading...\"}\r\n                        alt=\"profile pic\"\r\n                    />\r\n                    \r\n                    <div className=\"file-field input-field\">\r\n                    <div className=\"btn #64b5f6 blue darken-1\">\r\n                        <span>Upload Profile Picture</span>\r\n                        <input type=\"file\"\r\n                            onChange={e => updatePhoto(e.target.files[0])}\r\n                        />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                        <input className=\"file-path validate\" type=\"text\" />\r\n                    </div>\r\n                </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>{state ? state.name : ' loading'}</h4>\r\n                    <h5>{state ? state.email : ' loading'}</h5>\r\n                    <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"108%\" }}>\r\n                        <h6> {mypics.length} post </h6>\r\n                        <h6> {state ? state.followers.length : 0} followers </h6>\r\n                        <h6> {state ? state.following.length : 0} following </h6>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"gallery\">\r\n                {\r\n                    mypics.map(item => {\r\n                        return (\r\n                            <img ket={item._id} className=\"item\" src={item.photos} alt=\"\" />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Signup.js",["76","77","78"],"  \r\nimport React, { useState,useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport M from 'materialize-css'\r\n\r\nconst Signup = () => {\r\n    const history = useHistory()\r\n    const [name, setName] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [image, setImage] = useState(\"\")\r\n    const [url, setUrl] = useState(undefined)\r\n    useEffect(() => {\r\n        if(url){\r\n            uploadFields()\r\n        }\r\n    },[url])\r\n\r\n\r\n    const uploadPic = () =>{\r\n            // use formData to save the data\r\n            const data = new FormData()\r\n            data.append(\"file\", image)\r\n            // upload images to cloud\r\n            data.append(\"upload_preset\", \"insta_clone\")\r\n            data.append(\"cloud_name\", \"gloomy\")\r\n            // fetch those data back from cloud's API\r\n            fetch(\"https://api.cloudinary.com/v1_1/gloomy/image/upload\", {\r\n                method: \"POST\",\r\n                body: data,\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setUrl(data.url)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n    }\r\n\r\n    const uploadFields = () => {\r\n        if (!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)) {\r\n            M.toast({ html: \"invalid email\", classes: \"#c62828 red darken-3\" })\r\n            return\r\n        }\r\n        fetch('http://localhost:5000/signup', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                password: password,\r\n                email: email,\r\n                pic:url\r\n            })\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    // error message if user don't sign up correctly\r\n                    M.toast({ html: data.error, classes: \"#c62828 red darken-3\" })\r\n                }\r\n                else {\r\n                    // success msg from the back end if use signup is sucessful\r\n                    M.toast({ html: data.message, classes: \"#43a047 green darken-1\" })\r\n                    // use history to navigate user to the login screen\r\n                    history.push('/signin')\r\n                }\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n    const PostData = () => {\r\n        if(image){\r\n            uploadPic()\r\n        } else{\r\n            uploadFields()\r\n        }\r\n        \r\n    }\r\n    return (\r\n\r\n        <div className=\"mycard\">\r\n            <div className=\"card auth-card input-field\">\r\n\r\n                <h2> Instagram </h2>\r\n                <input type=\"text\"\r\n                    placeholder=\"name\"\r\n                    value={name}\r\n                    onChange={e => setName(e.target.value)}\r\n                />\r\n\r\n                <input type=\"text\"\r\n                    placeholder=\"email\"\r\n                    value={email}\r\n                    onChange={e => setEmail(e.target.value)}\r\n                />\r\n\r\n                <input type=\"password\"\r\n                    placeholder=\"password\"\r\n                    minlength=\"8\"\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n\r\n                <div className=\"file-field input-field\">\r\n                    <div className=\"btn #64b5f6 blue darken-1\">\r\n                        <span>Upload Profile Picture</span>\r\n                        <input type=\"file\"\r\n                            onChange={e => setImage(e.target.files[0])}\r\n                        />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                        <input className=\"file-path validate\" type=\"text\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                    onClick={() => PostData()}\r\n                >\r\n                    Signup\r\n                </button>\r\n                <h5>\r\n                    <Link to=\"/signin\" > Already have an account ?</Link>\r\n                </h5>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Signup","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Signin.js",["79","80","81"],"import React,{useState,useContext} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport {UserContext} from '../../App'\r\nimport M from 'materialize-css'\r\n\r\nconst Signin = () => {\r\n    const history = useHistory()\r\n    const {state,dispatch} = useContext(UserContext)\r\n    const [password,setPassword] = useState(\"\")\r\n    const [email,setEmail] = useState(\"\")\r\n\r\n    const PostData = () =>{\r\n        if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)){\r\n            M.toast({html: \"invalid email\",classes:\"#c62828 red darken-3\"})\r\n            return\r\n        }\r\n        fetch('/signin', {\r\n            method:'post',\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({\r\n                password:password,\r\n                email:email,\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data =>{\r\n            console.log(data)\r\n            if(data.error){\r\n                // error message if user don't sign up correctly\r\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n            }\r\n            else{\r\n                localStorage.setItem('jwt', data.token)\r\n                localStorage.setItem('user',JSON.stringify(data.user))\r\n                // after user is successfully signed in, dispptch\r\n                dispatch({type:\"USER\", payload:data.user})\r\n                M.toast({html: \"Login successfully\",classes:\"#43a047 green darken-1\"})\r\n                // navigate user to dasboard home page after sucessful login\r\n                history.push('/')\r\n            }\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    return (\r\n       \r\n        <div className = \"mycard\">\r\n            <div className=\"card auth-card input-field\">\r\n\r\n                <h2> Instagram </h2>\r\n                <input type=\"text\"\r\n                    placeholder=\"email\"\r\n                    value = {email}\r\n                    onChange={e=>setEmail(e.target.value)}\r\n                />\r\n\r\n                <input type=\"password\"\r\n                    placeholder=\"password\"\r\n                    value = {password}\r\n                    onChange={e=>setPassword(e.target.value)}\r\n                />\r\n\r\n                <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                onClick={()=>PostData()}\r\n                >\r\n                    Login\r\n                </button>\r\n                <h5> \r\n                    <Link to = \"/signup\" > Don't have an account?</Link>\r\n                </h5>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Signin","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\CreatePost.js",["82","83"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport M from 'materialize-css'\r\n\r\n\r\nconst CreatePost = () => {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [body, setBody] = useState(\"\")\r\n    const [image, setImage] = useState(\"\")\r\n    const [url, setUrl] = useState(\"\")\r\n    const history = useHistory()\r\n    useEffect(() => {\r\n        // use effect will be triggered after url is updated\r\n        // only trigger this function if URL exists\r\n        if(url){\r\n        // fetch data from server\r\n        fetch('/createpost', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                title: title,\r\n                body: body,\r\n                pic: url\r\n            })\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                if (data.error) {\r\n                    // error message if user don't sign up correctly\r\n                    M.toast({ html: data.error, classes: \"#c62828 red darken-3\" })\r\n                }\r\n                else {\r\n\r\n                    M.toast({ html: \"Created post successfully\", classes: \"#43a047 green darken-1\" })\r\n                    // navigate user to dasboard home page after sucessful login\r\n                    history.push('/')\r\n                }\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n        }\r\n    }, [url])\r\n\r\n    const postDetails = () => {\r\n        // use formData to save the data\r\n        const data = new FormData()\r\n        data.append(\"file\", image)\r\n        // upload images to cloud\r\n        data.append(\"upload_preset\", \"insta_clone\")\r\n        data.append(\"cloud_name\", \"gloomy\")\r\n        // fetch those data back from cloud's API\r\n        fetch(\"https://api.cloudinary.com/v1_1/gloomy/image/upload\", {\r\n            method: \"POST\",\r\n            body: data,\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setUrl(data.url)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card input-field\"\r\n            style={{\r\n                margin: \"30px auto\",\r\n                maxWidth: \"500px\",\r\n                padding: \"20px\",\r\n                textAlign: \"center\"\r\n            }}\r\n        >\r\n            <input type=\"text\" placeholder=\"title\"\r\n                value={title}\r\n                onChange={e => setTitle(e.target.value)}\r\n            />\r\n            <input type=\"text\" placeholder=\"body\"\r\n                onChange={e => setBody(e.target.value)}\r\n                value={body}\r\n            />\r\n\r\n            <div className=\"file-field input-field\">\r\n                <div className=\"btn #64b5f6 blue darken-1\">\r\n                    <span>Upload image</span>\r\n                    <input type=\"file\"\r\n                        onChange={e => setImage(e.target.files[0])}\r\n                    />\r\n                </div>\r\n                <div className=\"file-path-wrapper\">\r\n                    <input className=\"file-path validate\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n\r\n            <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                onClick={() => postDetails()}\r\n            >\r\n                Submit post\r\n                </button>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CreatePost","E:\\Insta_clone_MERN\\client\\src\\reducers\\userReducer.js",["84","85","86","87"],"export const initialState = null\r\n\r\nexport const reducer = (state,action) =>{\r\n    if(action.type == \"USER\"){\r\n        return action.payload\r\n    }\r\n    \r\n    if(action.type == \"CLEAR\"){\r\n        return null\r\n    }\r\n    if(action.type == \"UPDATE\"){\r\n        return {\r\n            ...state, \r\n            followers:action.payload.followers,\r\n            following:action.payload.following\r\n        }\r\n\r\n    }\r\n    if(action.type == \"UPDATEPIC\"){\r\n        return {\r\n            ...state, \r\n            pic:action.payload\r\n        }\r\n    }\r\n    return state\r\n}","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\UserProfile.js",["88","89","90"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { UserContext } from '../../App'\r\nimport { useParams } from 'react-router-dom'\r\nconst Profile = () => {\r\n    const [userProfile, setProfile] = useState(null)\r\n    \r\n    const { state, dispatch } = useContext(UserContext)\r\n    const { userid } = useParams()\r\n    const [showfollow, setShowFollow] = useState(state? !state.following.includes(userid):true)\r\n    \r\n    console.log(userid)\r\n    useEffect(() => {\r\n        fetch(`/user/${userid}`, {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                setProfile(result)\r\n\r\n                console.log(result)\r\n            })\r\n    }, [])\r\n\r\n    const followUser = () => {\r\n        fetch('/follow', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                followId: userid\r\n            })\r\n        }).then(res => res.json())\r\n            .then(\r\n                data => {\r\n\r\n                    console.log(data)\r\n                    dispatch({ type: \"UPDATE\", payload: { following: data.following, followers: data.followers } })\r\n                    localStorage.setItem(\"user\", JSON.stringify(data))\r\n                    \r\n                    setProfile((prevState) => {\r\n                        \r\n                        return {\r\n                            ...prevState,\r\n                            user: {\r\n                                ...prevState.user,\r\n                                followers: [...prevState.user.followers, data._id]\r\n                            }\r\n                        }\r\n                    })\r\n                    setShowFollow(false)\r\n                }\r\n            )\r\n    }\r\n\r\n    // unfollow logic is essentially almost the same as follow\r\n    const unfollowUser = () => {\r\n        fetch('/unfollow', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                unfollowId: userid\r\n            })\r\n        }).then(res => res.json())\r\n            .then(\r\n                data => {\r\n\r\n                    console.log(data)\r\n                    dispatch({ type: \"UPDATE\", payload: { following: data.following, followers: data.followers } })\r\n                    localStorage.setItem(\"user\", JSON.stringify(data))\r\n                    setProfile((prevState) => {\r\n                        const newFollower = prevState.user.followers.filter(item=>item != data._id)\r\n                        return {\r\n                            ...prevState,\r\n                            user: {\r\n                                ...prevState.user,\r\n                                followers: newFollower\r\n                            }\r\n                        }\r\n                    })\r\n                    setShowFollow(true)\r\n                }\r\n            )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {userProfile ?\r\n                <div style={{ maxWidth: \"550px\", margin: \"0px auto\" }}>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                        margin: \"18px 0px\",\r\n                        borderBottom: \"1px solid grey\"\r\n                    }}>\r\n                        <div >\r\n                            <img style={{ width: \"160px\", height: \"160px\", borderRadius: \"80px\" }}\r\n                                src={userProfile.user.pic}\r\n                                alt=\"profile pic\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div>\r\n                            <h4>{userProfile.user.name}</h4>\r\n                            <h5>{userProfile.user.email}</h5>\r\n\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"108%\" }}>\r\n                                <h6> {userProfile.posts.length} posts</h6>\r\n                                <h6> {userProfile.user.followers.length} followers </h6>\r\n                                <h6> {userProfile.user.following.length}  following</h6>\r\n                            </div>\r\n                            <div>\r\n                    \r\n                            {/* only show unfollow if the logged in user is already following this user */}\r\n                            {\r\n                                !userProfile.user.followers.includes(state._id) ?\r\n                                <button\r\n                                className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                                    onClick={() => followUser()}> Follow</button>\r\n                                :\r\n\r\n                                <button\r\n                                className=\"btn waves-effect waves-light #ff9100 orange accent-3\"\r\n                                    onClick={() => unfollowUser()}> unfollow</button>\r\n                            }\r\n                            </div>\r\n\r\n                            \r\n                            <br/>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                            \r\n                    <div className=\"gallery\">\r\n                        {\r\n                            userProfile.posts.map(item => {\r\n                                return (\r\n                                    <img ket={item._id} className=\"item\" src={item.photos} alt=\"\" />\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                :\r\n\r\n                <h2> Loading...</h2>\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\SubscribedUserPosts.js",["91","92","93","94","95","96","97"],"import React, { useState, useEffect, useContext, Fragment } from 'react';\r\nimport { UserContext } from '../../App'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Home = () => {\r\n    const [data, setData] = useState([])\r\n    // the state will get the data of user whose logged in\r\n    const { state, dispatch } = useContext(UserContext)\r\n\r\n    useEffect(() => {\r\n        fetch('/getsubpost', {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                setData(result.posts)\r\n            })\r\n    }, [])\r\n\r\n    const likePost = (id) => {\r\n        fetch('/like', {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                const newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    const unlikePost = (id) => {\r\n        fetch('/unlike', {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                // console.log(result)\r\n                const newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const makeComment = (text, postId) => {\r\n        // sent text and postId to the backend\r\n        fetch('/comment', {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId,\r\n                text\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                const newData = data.map(item => {\r\n                    if (item._id == result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const deletePost = (postid) => {\r\n        fetch(`/deletepost/${postid}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                Authorization: \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                const newData = data.filter(item => {\r\n                    return item._id !== result._id\r\n                })\r\n                setData(newData)\r\n            })\r\n\r\n    }\r\n\r\n    const deleteComment = (postId, commentId) => {\r\n        fetch(`/deletecomment/${postId}/${commentId}`, {\r\n            method: \"delete\",\r\n            headers: {\r\n                \"Authorization\": localStorage.getItem(\"jwt\")\r\n            },\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                let newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {/* use map to show dymamic info from the data base */}\r\n            {\r\n                data.map(item => {\r\n                    return (\r\n                        <div className=\"card home-card\" key={item._id}>\r\n                            <h5>\r\n                                <Link to={item.postedBy._id !== state._id ? \"/profile/\" + item.postedBy._id : \"/profile\"} >\r\n                                    <img style={{ width: \"30px\", height: \"30px\", borderRadius: \"80px\" }} src={item.postedBy.pic} />\r\n                                    {item.postedBy.name}\r\n                                </Link>\r\n                                {item.postedBy._id == state._id\r\n                                    && <i className=\"material-icons\"\r\n                                        style={{ float: \"right\", color: \"red\" }}\r\n                                        onClick={() => deletePost(item._id)}\r\n                                    >delete_forever</i>\r\n                                }\r\n\r\n                            </h5>\r\n\r\n                            <div className=\"card-image\">\r\n                                <img src={item.photos} />\r\n                            </div>\r\n\r\n                            <div className=\"card-image\">\r\n                                \r\n                                {/* user can only like post once, check if user is included \r\n                                in the likes array, then return like or unlike button accordingly*/}\r\n                                {item.likes.includes(state._id) ?\r\n\r\n                                    <i className=\"material-icons\"\r\n                                        style={{ color: \"red\" }}\r\n                                        onClick={() => { unlikePost(item._id) }}\r\n                                    >favorite</i>\r\n                                    :\r\n                                    <i className=\"material-icons\"\r\n                                        style={{ color: \"red\" }}\r\n                                        onClick={() => { likePost(item._id) }}\r\n                                    >favorite_border</i>\r\n                                }\r\n\r\n\r\n                                {/* show the number of likes by getting the length of likes array */}\r\n                                <h6> {item.likes.length} likes</h6>\r\n                                <h6> title: {item.title}</h6>\r\n                                <p> description: {item.body} </p>\r\n\r\n                                {\r\n                                    item.comments.map((record) => {\r\n                                        return (\r\n                                            <h6 key={record._id}><span style={{ fontWeight: \"500\" }}> {record.postedBy.name} </span>  {record.text}\r\n                                                {record.postedBy._id === state._id || item.postedBy._id == state._id\r\n                                                    ? <i className=\"material-icons small-icon\"\r\n                                                        onClick={() => deleteComment(item._id, record._id)}\r\n                                                        style={{ float: \"right\", fontSize: \"18px\" }}  >delete</i>\r\n                                                    :\r\n                                                    record.postedBy._id === state._id\r\n                                                    && <i className=\"material-icons small-icon\"\r\n                                                        onClick={() => deleteComment(item._id, record._id)}\r\n                                                        style={{ float: \"right\", fontSize: \"18px\" }}  >delete </i>\r\n                                                }\r\n                                            </h6>\r\n\r\n\r\n                                        )\r\n\r\n\r\n                                    })\r\n\r\n                                }\r\n\r\n                                <form onSubmit={(e) => {\r\n                                    e.preventDefault()\r\n                                    makeComment(e.target[0].value, item._id)\r\n                                }}>\r\n                                    <input type=\"text\" placeholder=\"add a comment\" /> <button className=\"btn waves-effect waves-light #0288d1 light-blue darken-2\" type=\"submit\">Comment</button>\r\n\r\n                                </form>\r\n                            </div>\r\n                        </div >\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home","E:\\Insta_clone_MERN\\client\\src\\components\\screens\\Explore.js",["98","99","100","101"],"\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { UserContext } from '../../App'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst Home = () => {\r\n    const [data, setData] = useState([])\r\n    // the state will get the data of user whose logged in\r\n    const { state, dispatch } = useContext(UserContext)\r\n\r\n    useEffect(() => {\r\n        fetch('/allpost', {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                setData(result.posts)\r\n            })\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {/* use map to show dymamic info from the data base */}\r\n            {\r\n                data.map(item => {\r\n                    return (\r\n                        <div className=\"card home-card\" key={item._id}>\r\n                            <h5 style = {{padding:\"5px\"}}>\r\n                        <Link to = { \"/profile/\"+item.postedBy._id } >\r\n                        <img style={{ width: \"30px\", height: \"30px\", borderRadius: \"80px\" }} src={item.postedBy.pic} />\r\n                            {item.postedBy.name} </Link>\r\n                \r\n\r\n                            </h5>\r\n\r\n                            <div className=\"card-image\">\r\n                                <img src={item.photos} />\r\n                            </div>\r\n\r\n                            <div className=\"card-image\">\r\n                                <i className=\"material-icons\" style={{ color: \"red\" }}>favorite</i>\r\n                    \r\n\r\n\r\n                                {/* show the number of likes by getting the length of likes array */}\r\n                                <h6> {item.likes.length} likes</h6>\r\n                                <h6> Title: {item.title}</h6>\r\n                                <p> Description: {item.body} </p>\r\n\r\n                                {\r\n                                    item.comments.map((record) => {\r\n                                        return (\r\n                                            <h6 key={record._id}><span style={{ fontWeight: \"500\" }}> {record.postedBy.name} </span>  {record.text}\r\n                                            </h6>\r\n                                        )\r\n\r\n                                    })\r\n\r\n                                }\r\n\r\n                            </div>\r\n                        </div >\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":21,"column":10,"nodeType":"108","messageId":"109","endLine":21,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":33,"column":6,"nodeType":"112","endLine":33,"endColumn":8,"suggestions":"113"},{"ruleId":"106","severity":1,"message":"114","line":9,"column":20,"nodeType":"108","messageId":"109","endLine":9,"endColumn":28},{"ruleId":"115","severity":1,"message":"116","line":150,"column":37,"nodeType":"117","endLine":150,"endColumn":132},{"ruleId":"118","severity":1,"message":"119","line":154,"column":52,"nodeType":"120","messageId":"121","endLine":154,"endColumn":54},{"ruleId":"115","severity":1,"message":"116","line":164,"column":33,"nodeType":"117","endLine":164,"endColumn":58},{"ruleId":"118","severity":1,"message":"119","line":196,"column":105,"nodeType":"120","messageId":"121","endLine":196,"endColumn":107},{"ruleId":"106","severity":1,"message":"122","line":8,"column":12,"nodeType":"108","messageId":"109","endLine":8,"endColumn":15},{"ruleId":"110","severity":1,"message":"123","line":61,"column":7,"nodeType":"112","endLine":61,"endColumn":14,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"125","line":17,"column":7,"nodeType":"112","endLine":17,"endColumn":12,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":42,"column":24,"nodeType":"129","messageId":"130","endLine":42,"endColumn":25,"suggestions":"131"},{"ruleId":"127","severity":1,"message":"128","line":42,"column":49,"nodeType":"129","messageId":"130","endLine":42,"endColumn":50,"suggestions":"132"},{"ruleId":"106","severity":1,"message":"107","line":8,"column":12,"nodeType":"108","messageId":"109","endLine":8,"endColumn":17},{"ruleId":"127","severity":1,"message":"128","line":13,"column":23,"nodeType":"129","messageId":"130","endLine":13,"endColumn":24,"suggestions":"133"},{"ruleId":"127","severity":1,"message":"128","line":13,"column":48,"nodeType":"129","messageId":"130","endLine":13,"endColumn":49,"suggestions":"134"},{"ruleId":"106","severity":1,"message":"135","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":14},{"ruleId":"110","severity":1,"message":"136","line":45,"column":8,"nodeType":"112","endLine":45,"endColumn":13,"suggestions":"137"},{"ruleId":"118","severity":1,"message":"119","line":4,"column":20,"nodeType":"120","messageId":"121","endLine":4,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":8,"column":20,"nodeType":"120","messageId":"121","endLine":8,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":11,"column":20,"nodeType":"120","messageId":"121","endLine":11,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":19,"column":20,"nodeType":"120","messageId":"121","endLine":19,"endColumn":22},{"ruleId":"106","severity":1,"message":"138","line":9,"column":12,"nodeType":"108","messageId":"109","endLine":9,"endColumn":22},{"ruleId":"110","severity":1,"message":"139","line":23,"column":8,"nodeType":"112","endLine":23,"endColumn":10,"suggestions":"140"},{"ruleId":"118","severity":1,"message":"141","line":77,"column":88,"nodeType":"120","messageId":"121","endLine":77,"endColumn":90},{"ruleId":"106","severity":1,"message":"142","line":1,"column":50,"nodeType":"108","messageId":"109","endLine":1,"endColumn":58},{"ruleId":"106","severity":1,"message":"114","line":9,"column":20,"nodeType":"108","messageId":"109","endLine":9,"endColumn":28},{"ruleId":"118","severity":1,"message":"119","line":88,"column":34,"nodeType":"120","messageId":"121","endLine":88,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":148,"column":37,"nodeType":"117","endLine":148,"endColumn":132},{"ruleId":"118","severity":1,"message":"119","line":151,"column":52,"nodeType":"120","messageId":"121","endLine":151,"endColumn":54},{"ruleId":"115","severity":1,"message":"116","line":161,"column":33,"nodeType":"117","endLine":161,"endColumn":58},{"ruleId":"118","severity":1,"message":"119","line":191,"column":105,"nodeType":"120","messageId":"121","endLine":191,"endColumn":107},{"ruleId":"106","severity":1,"message":"107","line":10,"column":13,"nodeType":"108","messageId":"109","endLine":10,"endColumn":18},{"ruleId":"106","severity":1,"message":"114","line":10,"column":20,"nodeType":"108","messageId":"109","endLine":10,"endColumn":28},{"ruleId":"115","severity":1,"message":"116","line":34,"column":25,"nodeType":"117","endLine":34,"endColumn":120},{"ruleId":"115","severity":1,"message":"116","line":41,"column":33,"nodeType":"117","endLine":41,"endColumn":58},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["145"],"'dispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.",["146"],"React Hook useEffect has a missing dependency: 'uploadFields'. Either include it or remove the dependency array.",["147"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["148","149"],["150","151"],["152","153"],["154","155"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'body', 'history', and 'title'. Either include them or remove the dependency array.",["156"],"'showfollow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["157"],"Expected '!==' and instead saw '!='.","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"messageId":"164","fix":"165","desc":"166"},{"messageId":"167","fix":"168","desc":"169"},{"messageId":"164","fix":"170","desc":"166"},{"messageId":"167","fix":"171","desc":"169"},{"messageId":"164","fix":"172","desc":"166"},{"messageId":"167","fix":"173","desc":"169"},{"messageId":"164","fix":"174","desc":"166"},{"messageId":"167","fix":"175","desc":"169"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [dispatch, history]",{"range":"180","text":"181"},"Update the dependencies array to be: [dispatch, image, state]",{"range":"182","text":"183"},"Update the dependencies array to be: [uploadFields, url]",{"range":"184","text":"185"},"removeEscape",{"range":"186","text":"187"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"188","text":"189"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"190","text":"187"},{"range":"191","text":"189"},{"range":"192","text":"187"},{"range":"193","text":"189"},{"range":"194","text":"187"},{"range":"195","text":"189"},"Update the dependencies array to be: [body, history, title, url]",{"range":"196","text":"197"},"Update the dependencies array to be: [userid]",{"range":"198","text":"199"},[1247,1249],"[dispatch, history]",[2146,2153],"[dispatch, image, state]",[514,519],"[uploadFields, url]",[1327,1328],"",[1327,1327],"\\",[1352,1353],[1352,1352],[430,431],[430,430],[455,456],[455,455],[1607,1612],"[body, history, title, url]",[794,796],"[userid]"]